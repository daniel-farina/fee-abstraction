syntax = "proto3";
package feeabstraction.absfee.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

option go_package = "github.com/notional-labs/feeabstraction/v1/x/feeabs/types";


message FeeabsIbcPacketData {
	oneof packet {
		NoData noData = 1;
		SwapAmountInRoute ibcSwapAmountInRoute = 2;
		OsmosisQuerySpotPriceRequestPacketData ibcOsmosisQuerySpotPriceRequestPacketData = 3;
	}
}

message NoData {}

// TODO : add more details for this message
message SwapAmountInRoute {
	uint64 pool_id   = 1;
	string token_out_denom = 2;
}

// TODO : add more details for this message
message OsmosisQueryRequestPacketData  {
	uint64 pool_id = 1;
	string token_in = 2;
	repeated SwapAmountInRoute routes = 3 [(gogoproto.nullable) = false];
}

message OsmosisQuerySpotPriceRequestPacketData {
	uint64 pool_id = 1;
	string base_asset_denom = 2;
	string quote_asset_denom = 3;
}

message QueryArithmeticTwapToNowRequest {
	uint64 pool_id = 1;
	string base_asset = 2;
	string quote_asset = 3;
	google.protobuf.Timestamp start_time = 4 [
	  (gogoproto.nullable) = false,
	  (gogoproto.stdtime) = true,
	  (gogoproto.moretags) = "yaml:\"start_time\""
	];
}

message InterchainQueryRequest{
	bytes data = 1;
	string path = 2;
}

message InterchainQueryRequestPacket{
	repeated InterchainQueryRequest requests = 1 [(gogoproto.nullable) = false];
}

message HostChainFeeAbsConfig{
    // ibc token is allowed to be used as fee token 
    string ibc_denom = 1 
    [(gogoproto.moretags) = "yaml:\"allowed_token\"" ];

    // connection id to osmosis chain
    string ibc_transfer_channel = 2;

    // contract on osmosis with custom ibc logic for fetching spot price
    string handler_outpost_contract_address = 3;

    // pool id
    uint64 pool_id = 4;

    // Active
    bool active = 5;
}