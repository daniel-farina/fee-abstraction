syntax = "proto3";
package feeabstraction.absfee.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "feeabstraction/absfee/v1beta1/params.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/notional-labs/feeabstraction/v1/x/feeabs/types";

// Query defines the gRPC querier service.
service Query {
    // OsmosisSpotPrice return spot price of pair Osmo/nativeToken
  rpc OsmosisSpotPrice(QueryOsmosisSpotPriceRequest) returns (QueryOsmosisSpotPriceResponse) {
    option (google.api.http).get = "/fee-abstraction/feeabs/v1/osmosis-spot-price";
  }
  // FeeabsModuleBalances return total balances of feeabs module
  rpc FeeabsModuleBalances(QueryFeeabsModuleBalacesRequest) returns (QueryFeeabsModuleBalacesResponse) {
    option (google.api.http).get = "/fee-abstraction/feeabs/v1/module-balances";
  }
}

// QueryOsmosisSpotPriceRequest is the request type for the Query/Feeabs RPC method.
message QueryOsmosisSpotPriceRequest {}
  
message QueryOsmosisSpotPriceResponse {
    string base_asset = 1;
    string quote_asset = 2;
    string spot_price = 3 [
    (gogoproto.moretags)   = "yaml:\"spot_price\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// QueryFeeabsModuleBalacesRequest is the request type for the Query/Feeabs RPC method.
message QueryFeeabsModuleBalacesRequest {}
  
message QueryFeeabsModuleBalacesResponse {
    repeated cosmos.base.v1beta1.Coin balances = 1 [
      (gogoproto.nullable)     = false,
      (gogoproto.moretags)     = "yaml:\"balances\"",
      (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
}